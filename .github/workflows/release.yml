name: Auto Tag and Release

on:
  push:
    branches:
      - master

jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "")
          if [ -z "$latest_tag" ]; then
            echo "No tags found, setting latest_tag to v0.0.0"
            latest_tag="v0.0.0"
          fi
          echo "Latest tag: $latest_tag"
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Calculate next version
        id: calculate_next_version
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          echo "Latest tag is $latest_tag"

          # Extract major, minor, and patch numbers
          IFS='.' read -r -a version_parts <<< "${latest_tag//v/}"
          major="${version_parts[0]}"
          minor="${version_parts[1]}"
          patch="${version_parts[2]}"

          # Increment patch version
          if [ "$patch" -eq 9 ]; then
            new_minor=$((minor + 1))
            new_patch=0
            new_version="v${major}.${new_minor}.${new_patch}"
          else
            new_patch=$((patch + 1))
            new_version="v${major}.${minor}.${new_patch}"
          fi

          echo "New version: $new_version"
          echo "::set-output name=new_version::$new_version"

      - name: Check if new tag already exists
        id: check_tag_exists
        run: |
          new_version=${{ steps.calculate_next_version.outputs.new_version }}
          tag_exists=$(git tag -l "$new_version")
          if [ -n "$tag_exists" ]; then
            echo "Tag $new_version already exists."
            echo "::set-output name=tag_exists::true"
          else
            echo "Tag $new_version does not exist."
            echo "::set-output name=tag_exists::false"
          fi

      - name: Create new tag
        if: steps.check_tag_exists.outputs.tag_exists == 'false'
        run: |
          new_version=${{ steps.calculate_next_version.outputs.new_version }}
          git tag "$new_version"
          git push origin "$new_version"

      - name: Create GitHub Release
        if: steps.check_tag_exists.outputs.tag_exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.calculate_next_version.outputs.new_version }}
          release_name: ${{ steps.calculate_next_version.outputs.new_version }}
          draft: false
          prerelease: false
